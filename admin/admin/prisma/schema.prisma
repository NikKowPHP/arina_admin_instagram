// ROO-AUDIT-TAG :: plan-009-database-schema.md :: Implement database schema
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  createdAt    DateTime   @default(now()) @map("created_at")
  triggers     Trigger[]
  activityLogs ActivityLog[]
  
  @@map("users")
}

model Trigger {
  id         String   @id @default(uuid())
  postId     String   @map("post_id")
  keyword    String
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  userId     String   @map("user_id")
  templateId String   @map("template_id")
  
  user     User     @relation(fields: [userId], references: [id])
  template Template @relation(fields: [templateId], references: [id])
  
  @@index([postId], name: "idx_triggers_post_id")
  @@index([keyword], name: "idx_triggers_keyword")
  @@map("triggers")
}

model Template {
  id        String   @id @default(uuid())
  content   String
  mediaUrl  String?  @map("media_url")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  triggers  Trigger[]
  
  @@map("templates")
}

model ActivityLog {
  id        String   @id @default(uuid())
  action    String
  details   Json?
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")
  
  user User @relation(fields: [userId], references: [id])
  
  @@map("activity_log")
}

model ProcessedComment {
  id         String   @id @default(uuid())
  commentId  String   @unique @map("comment_id")
  postId     String   @map("post_id")
  processedAt DateTime @default(now()) @map("processed_at")
  
  @@index([postId], name: "idx_processed_comments_post_id")
  @@map("processed_comments")
}

// ROO-AUDIT-TAG :: plan-001-comment-monitoring.md :: Comment match logging
model CommentMatch {
  id          String   @id @default(uuid())
  commentId   String   @map("comment_id")
  postId      String   @map("post_id")
  keyword     String
  matchedText String   @map("matched_text") @db.VarChar(100)
  fullComment String   @map("full_comment")
  createdAt   DateTime @default(now()) @map("created_at")
  
  @@index([postId], name: "idx_comment_matches_post_id")
  @@index([keyword], name: "idx_comment_matches_keyword")
  @@map("comment_matches")
}
// ROO-AUDIT-TAG :: plan-001-comment-monitoring.md :: END

model DeadLetterQueue {
  id           String   @id @default(uuid())
  user_id      String
  action       String
  details      String
  errorMessage String   @map("error_message")
  timestamp    DateTime @default(now())
  
  @@map("dead_letter_queue")
}
model BotStatus {
  id          String   @id @default(uuid())
  serviceName String   @unique @map("service_name")
  isHealthy   Boolean  @default(false) @map("is_healthy")
  lastPing    DateTime @map("last_ping")
  details     Json?

  @@map("bot_status")
}

// ROO-AUDIT-TAG :: plan-009-database-schema.md :: END
